
<android.renderscript.Allocation: android.renderscript.Allocation createTyped(android.renderscript.RenderScript,android.renderscript.Type)> -> _SOURCE_
<android.location.ICountryDetector$Stub: android.os.IBinder asBinder()> -> _SOURCE_
<android.location.GpsSatellite: int getPrn()> -> _SOURCE_
<android.location.Address: java.lang.String getFeatureName()> -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone: android.telephony.CellLocation getCellLocation()> -> _SOURCE_
<com.android.server.location.LocationBasedCountryDetector: android.location.Country detectCountry()> -> _SOURCE_
<android.location.Address: java.lang.String getAdminArea()> -> _SOURCE_
<android.location.Location: float getSpeed()> -> _SOURCE_
<com.android.server.location.MockProvider: long getStatusUpdateTime()> -> _SOURCE_
<android.location.Address: java.util.Locale getLocale()> -> _SOURCE_
<android.location.LocationManager: java.util.List getProviders(boolean)> -> _SOURCE_
<android.location.Address: java.lang.String getCountryName()> -> _SOURCE_
<android.telephony.SmsCbLocation: int getLac()> -> _SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: void getPreferredNetworkType(android.os.Message)> -> _SOURCE_
<android.renderscript.Allocation: android.renderscript.Allocation createSized(android.renderscript.RenderScript,android.renderscript.Element,int,int)> -> _SOURCE_
<android.location.ILocationManager$Stub$Proxy: java.util.List getAllProviders()> -> _SOURCE_
<android.location.GpsSatellite: float getSnr()> -> _SOURCE_
<android.location.GeocoderParams: java.util.Locale getLocale()> -> _SOURCE_
<android.renderscript.Allocation: int getBytesSize()> -> _SOURCE_
<android.telephony.cdma.CdmaCellLocation: int getNetworkId()> -> _SOURCE_
<com.android.server.location.PassiveProvider: long getStatusUpdateTime()> -> _SOURCE_
<android.location.ILocationManager$Stub$Proxy: java.lang.String getBestProvider(android.location.Criteria,boolean)> -> _SOURCE_
<com.android.internal.telephony.sip.SipPhone: void getPreferredNetworkType(android.os.Message)> -> _SOURCE_
<android.renderscript.Allocation: android.renderscript.Allocation createTyped(android.renderscript.RenderScript,android.renderscript.Type,int)> -> _SOURCE_
<com.android.server.location.LocationBasedCountryDetector: android.location.Location getLastKnownLocation()> ->_SOURCE_
<com.android.server.location.PassiveProvider: java.lang.String getName()> -> _SOURCE_
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)> -> _SOURCE_
<com.android.server.location.ComprehensiveCountryDetector: android.location.Country getNetworkBasedCountry()> -> _SOURCE_
<android.location.ILocationManager$Stub$Proxy: android.location.Location getLastLocation(android.location.LocationRequest,java.lang.String)> -> _SOURCE_
<android.renderscript.Allocation: android.renderscript.Type typeFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap,android.renderscript.Allocation$MipmapControl)> -> _SOURCE_
<com.android.internal.location.ILocationProvider$Stub$Proxy: long getStatusUpdateTime()> -> _SOURCE_
<android.renderscript.Allocation: android.renderscript.Allocation createCubemapFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap> -> _SOURCE_
<android.location.Address: int getMaxAddressLineIndex()> -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: void getPreferredNetworkType(android.os.Message)> -> _SOURCE_
<android.location.Geocoder: java.util.List getFromLocation(double,double,int)> -> _SOURCE_
<android.location.Criteria: int getVerticalAccuracy()> -> _SOURCE_
<android.location.Geocoder: java.util.List getFromLocationName(java.lang.String,int,double,double,double,double)> -> _SOURCE_
<android.location.IGeocodeProvider$Stub$Proxy: java.lang.String getFromLocationName(java.lang.String,double,double,double,double,int,android.location.GeocoderParams,java.util.List)> -> _SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: android.telephony.CellLocation getCellLocation()> -> _SOURCE_
<android.location.ILocationManager$Stub$Proxy: com.android.internal.location.ProviderProperties getProviderProperties(java.lang.String)> -> _SOURCE_
<android.location.Location: long getElapsedRealtimeNanos()> -> _SOURCE_
<android.location.Location: double getLatitude()> -> _SOURCE_
<android.location.Location: float getBearing()> -> _SOURCE_
<android.location.ILocationManager$Stub$Proxy: java.lang.String getFromLocationName(java.lang.String,double,double,double,double,int,android.location.GeocoderParams,java.util.List)> -> _SOURCE_
<android.renderscript.Allocation: android.renderscript.Allocation createFromString(android.renderscript.RenderScript,java.lang.String,int)> -> _SOURCE_
<android.location.IGeocodeProvider$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.location.LocationProvider: java.lang.String getName()> -> _SOURCE_
<android.location.IGpsStatusListener$Stub: android.os.IBinder asBinder()> -> _SOURCE_
<android.renderscript.Mesh$AllocationBuilder: int getCurrentVertexTypeIndex()> -> _SOURCE_
<android.renderscript.Allocation: android.renderscript.Allocation createCubemapFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap,android.renderscript.Allocation$MipmapControl,int)> -> _SOURCE_
<com.android.server.location.MockProvider: int getStatus(android.os.Bundle)> -> _SOURCE_
<android.location.Location: android.os.Bundle getExtras()> -> _SOURCE_
<android.location.ILocationListener$Stub: android.os.IBinder asBinder()> -> _SOURCE_
<android.renderscript.Allocation: android.graphics.SurfaceTexture getSurfaceTexture()> -> _SOURCE_
<android.location.Criteria: int getPowerRequirement()> -> _SOURCE_
<android.telephony.gsm.GsmCellLocation: int getPsc()> -> _SOURCE_
<android.location.GpsStatus: java.lang.Iterable getSatellites()> -> _SOURCE_
<com.android.camera.LocationManager: android.location.Location getCurrentLocation()> ->_SOURCE_
<android.location.Address: java.lang.String getPremises()> -> _SOURCE_
<android.telephony.gsm.GsmCellLocation: int getLac()> -> _SOURCE_
<com.android.internal.location.GpsNetInitiatedHandler: byte[] stringToByteArray(java.lang.String,boolean)> -> _SOURCE_
<android.telephony.cdma.CdmaCellLocation: int getSystemId()> -> _SOURCE_
<com.android.server.location.LocationProviderProxy: java.lang.String getName()> -> _SOURCE_
<android.location.Address: java.lang.String getThoroughfare()> -> _SOURCE_
<com.android.camera.RecordLocationPreference: java.lang.String getValue()> -> _SOURCE_
<com.android.internal.telephony.cdma.CDMALTEPhone: void getPreferredNetworkType(android.os.Message)> android.permission.WAKE_LOCK -> _SOURCE_
<android.location.LocationRequest: java.lang.String getProvider()> -> _SOURCE_
<com.android.server.LocationManagerService: java.lang.String getFromLocation(double,double,int,android.location.GeocoderParams,java.util.List)> -> _SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: void getPreferredNetworkType(android.os.Message)> -> _SOURCE_
<android.location.IGpsStatusProvider$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.location.LocationRequest: int getQuality()> -> _SOURCE_
<com.android.server.location.MockProvider: com.android.internal.location.ProviderProperties getProperties()> -> _SOURCE_
<android.telephony.CellLocation: android.telephony.CellLocation getEmpty()> -> _SOURCE_
<android.location.Location: long getTime()> -> _SOURCE_
<android.renderscript.Allocation: android.renderscript.Element getElement()> -> _SOURCE_
<android.location.Address: java.lang.String getAddressLine(int)> -> _SOURCE_
<com.android.server.location.PassiveProvider: com.android.internal.location.ProviderProperties getProperties()> -> _SOURCE_
<android.renderscript.Allocation: android.renderscript.Allocation createFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap)> -> _SOURCE_
<com.android.server.location.MockProvider: java.lang.String getName()> -> _SOURCE_
<android.location.Country: int getSource()> -> _SOURCE_
<com.android.server.location.GeofenceState: double getDistanceToBoundary()> -> _SOURCE_
<com.android.server.location.LocationProviderProxy: int getStatus(android.os.Bundle)> -> _SOURCE_
<com.android.internal.location.ILocationProvider$Stub: android.os.IBinder asBinder()> -> _SOURCE_
<android.location.Address: java.lang.String getPhone()> -> _SOURCE_
<android.location.Geofence: double getLongitude()> -> _SOURCE_
<android.location.ICountryDetector$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: android.telephony.CellLocation getCellLocation()> -> _SOURCE_
<android.location.ICountryDetector$Stub$Proxy: android.location.Country detectCountry()> -> _SOURCE_
<android.telephony.cdma.CdmaCellLocation: int getBaseStationId()> -> _SOURCE_
<android.location.INetInitiatedListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.location.LocationRequest: long getInterval()> -> _SOURCE_
<android.renderscript.Allocation: android.renderscript.Allocation createFromBitmapResource(android.renderscript.RenderScript,android.content.res.Resources,int)> -> _SOURCE_
<android.location.ILocationManager$Stub$Proxy: java.lang.String getFromLocation(double,double,int,android.location.GeocoderParams,java.util.List)> -> _SOURCE_
<android.location.ICountryListener$Stub: android.os.IBinder asBinder()> -> _SOURCE_
<com.android.internal.location.ILocationProvider$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.location.Address: java.lang.String getUrl()> -> _SOURCE_
<com.android.server.location.LocationBasedCountryDetector: java.lang.String getCountryFromLocation(android.location.Location)> -> _SOURCE_
<com.android.server.location.LocationBasedCountryDetector: long getQueryLocationTimeout()> -> _SOURCE_
<android.location.Address: java.lang.String getLocality()> -> _SOURCE_
<android.location.IGpsStatusProvider$Stub: android.os.IBinder asBinder()> -> _SOURCE_
<com.android.server.LocationManagerService$Receiver: android.location.ILocationListener getListener()> -> _SOURCE_
<android.webkit.GeolocationPermissions: android.webkit.GeolocationPermissions getInstance()> -> _SOURCE_
<android.location.INetInitiatedListener$Stub: android.os.IBinder asBinder()> -> _SOURCE_
<android.location.Location: java.lang.String getProvider()> -> _SOURCE_
<android.location.LocationProvider: int getPowerRequirement()> -> _SOURCE_
<com.android.server.location.LocationProviderProxy: com.android.internal.location.ProviderProperties getProperties()> -> _SOURCE_
<com.android.server.LocationManagerService: java.util.List getAllProviders()> -> _SOURCE_
<android.renderscript.Allocation: android.renderscript.Allocation createCubemapFromCubeFaces(android.renderscript.RenderScript,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.renderscript.Allocation$MipmapControl,int)> -> _SOURCE_
<android.location.ILocationListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.location.LocationManager: java.util.List getAllProviders()> -> _SOURCE_
<android.location.Criteria: int getSpeedAccuracy()> -> _SOURCE_
<android.location.GpsStatus: int getTimeToFirstFix()> -> _SOURCE_
<android.location.Geofence: int getType()>  -> _SOURCE_
<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()> -> _SOURCE_
<android.location.Geofence: float getRadius()> -> _SOURCE_
<com.android.internal.telephony.PhoneBase: void getPreferredNetworkType(android.os.Message)> android.permission.WAKE_LOCK -> _SOURCE_
<com.android.server.location.GpsLocationProvider: android.location.INetInitiatedListener getNetInitiatedListener()> -> _SOURCE_
<android.location.ILocationManager$Stub$Proxy: java.util.List getProviders(android.location.Criteria,boolean)> android.permission.ACCESS_FINE_LOCATION android.permission.ACCESS_COARSE_LOCATION -> _SOURCE_
<android.location.Geofence: double getLatitude()> -> _SOURCE_
<android.location.Address: android.os.Bundle getExtras()> -> _SOURCE_
<android.telephony.cdma.CdmaCellLocation: int getBaseStationLongitude()> -> _SOURCE_
<com.android.server.LocationManagerService: android.location.Location getLastLocation(android.location.LocationRequest,java.lang.String)> -> _SOURCE_
<android.location.Location: double getAltitude()> -> _SOURCE_
<com.android.server.LocationManagerService: java.util.List getProviders(android.location.Criteria,boolean)> -> _SOURCE_
<com.android.server.location.GeocoderProxy: java.lang.String getFromLocationName(java.lang.String,double,double,double,double,int,android.location.GeocoderParams,java.util.List)> -> _SOURCE_
<android.location.Address: double getLongitude()> -> _SOURCE_
<android.location.GpsSatellite: float getElevation()> -> _SOURCE_
<com.android.internal.telephony.PhoneProxy: android.telephony.CellLocation getCellLocation()> -> _SOURCE_
<android.renderscript.Allocation: android.renderscript.Type getType()> -> _SOURCE_
<android.location.Location: android.location.Location getExtraLocation(java.lang.String)> -> _SOURCE_
<android.renderscript.Allocation: android.view.Surface getSurface()> -> _SOURCE_
<android.location.IGeocodeProvider$Stub: android.os.IBinder asBinder()> -> _SOURCE_
<com.android.phone.PhoneInterfaceManager: android.os.Bundle getCellLocation()> -> _SOURCE_
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)> -> _SOURCE_
<android.renderscript.Mesh$AllocationBuilder: int getCurrentIndexSetIndex()> -> _SOURCE_
<android.location.IGpsStatusListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.server.location.GpsLocationProvider: com.android.internal.location.ProviderProperties getProperties()> -> _SOURCE_
<android.location.Country: java.lang.String getCountryIso()> -> _SOURCE_
<android.location.LocationProvider: int getAccuracy()> -> _SOURCE_
<android.location.GpsStatus: int getMaxSatellites()> -> _SOURCE_
<android.location.ILocationManager$Stub: android.os.IBinder asBinder()> -> _SOURCE_
<com.google.android.apps.lightcycle.util.LocationProvider: android.location.Location getCurrentLocation()> -> _SOURCE_
<android.renderscript.Allocation: android.renderscript.Allocation createCubemapFromCubeFaces(android.renderscript.RenderScript,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap)> -> _SOURCE_
<com.android.server.location.ComprehensiveCountryDetector: android.location.Country getSimBasedCountry()> -> _SOURCE_
<com.android.internal.location.ILocationProvider$Stub$Proxy: int getStatus(android.os.Bundle)> -> _SOURCE_
<android.location.GeocoderParams: java.lang.String getClientPackage()> -> _SOURCE_
<com.android.server.location.ComprehensiveCountryDetector: android.location.Country getLocaleCountry()> -> _SOURCE_
<android.renderscript.Allocation: android.renderscript.Allocation createSized(android.renderscript.RenderScript,android.renderscript.Element,int)> -> _SOURCE_
<android.telephony.gsm.GsmCellLocation: int getCid()> -> _SOURCE_
<com.android.server.location.GeocoderProxy: java.lang.String getFromLocation(double,double,int,android.location.GeocoderParams,java.util.List)> -> _SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: void getPreferredNetworkType(android.os.Message)> -> _SOURCE_
<android.location.LocationRequest: long getExpireAt()> -> _SOURCE_
<com.android.server.LocationManagerService: java.lang.String getFromLocationName(java.lang.String,double,double,double,double,int,android.location.GeocoderParams,java.util.List)> -> _SOURCE_
<android.location.LocationManager: java.util.List getProviders(android.location.Criteria,boolean)> -> _SOURCE_
<android.location.LocationManager: android.location.Location getLastLocation()> -> _SOURCE_
<com.android.server.location.GpsLocationProvider: java.lang.String getName()> -> _SOURCE_
<com.android.server.LocationManagerService: com.android.internal.location.ProviderProperties getProviderProperties(java.lang.String)> -> _SOURCE_
<android.location.Geocoder: java.util.List getFromLocationName(java.lang.String,int)> -> _SOURCE_
<com.android.server.location.GpsXtraDownloader: byte[] downloadXtraData()> -> _SOURCE_
<android.location.Address: java.lang.String getPostalCode()> -> _SOURCE_
<android.webkit.GeolocationPermissionsClassic: android.webkit.GeolocationPermissionsClassic getInstance()> -> _SOURCE_
<android.location.GpsSatellite: float getAzimuth()> -> _SOURCE_
<com.android.server.location.GeocoderProxy: java.lang.String getConnectedPackageName()> -> _SOURCE_
<android.location.Country: long getTimestamp()> -> _SOURCE_
<com.android.internal.location.ILocationProvider$Stub$Proxy: com.android.internal.location.ProviderProperties getProperties()> -> _SOURCE_
<com.android.server.location.GpsXtraDownloader: byte[] doDownload(java.lang.String,boolean,java.lang.String,int)> -> _SOURCE_
<android.location.IGeocodeProvider$Stub$Proxy: java.lang.String getFromLocation(double,double,int,android.location.GeocoderParams,java.util.List)> -> _SOURCE_
<android.telephony.cdma.CdmaCellLocation: int getBaseStationLatitude()> -> _SOURCE_
<android.location.LocationManager: android.location.LocationProvider getProvider(java.lang.String)> -> _SOURCE_
<com.android.internal.location.GpsNetInitiatedHandler: java.lang.String getDialogTitle(com.android.internal.location.GpsNetInitiatedHandler$GpsNiNotification,android.content.Context)> -> _SOURCE_
<android.location.LocationRequest: long getFastestInterval()> -> _SOURCE_
<android.location.Address: java.lang.String getSubLocality()> -> _SOURCE_
<android.location.Address: java.lang.String getSubAdminArea()> -> _SOURCE_
<android.location.LocationManager: android.location.GpsStatus getGpsStatus(android.location.GpsStatus)> -> _SOURCE_
<android.renderscript.AllocationAdapter: int getID(android.renderscript.RenderScript)> -> _SOURCE_
<android.location.Address: double getLatitude()> -> _SOURCE_
<android.location.Criteria: int getHorizontalAccuracy()> -> _SOURCE_
<android.location.ILocationManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)> -> _SOURCE_
<android.renderscript.Allocation: int getUsage()> -> _SOURCE_
<com.android.server.location.GpsLocationProvider: android.location.IGpsStatusProvider getGpsStatusProvider()> -> _SOURCE_
<com.android.server.location.ComprehensiveCountryDetector: android.location.Country getLastKnownLocationBasedCountry()> -> _SOURCE_
<android.telephony.SmsCbLocation: int getCid()> -> _SOURCE_
<android.location.LocationRequest: int getNumUpdates()> -> _SOURCE_
<com.android.server.location.GpsLocationProvider: long getStatusUpdateTime()> -> _SOURCE_
<com.android.server.location.GpsLocationProvider: int getStatus(android.os.Bundle)> -> _SOURCE_
<com.android.server.location.LocationFudger: android.location.Location getOrCreate(android.location.Location)> -> _SOURCE_
<android.location.ICountryListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.location.LocationRequest: float getSmallestDisplacement()> -> _SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: android.telephony.CellLocation getCellLocation()> -> _SOURCE_
<android.location.Address: java.lang.String getCountryCode()> -> _SOURCE_
<com.android.phone.PhoneInterfaceManager: int getNetworkType()> -> _SOURCE_
<android.location.Location: float getAccuracy()> -> _SOURCE_
<android.location.Location: double getLongitude()> -> _SOURCE_
<com.android.server.location.LocationProviderProxy: java.lang.String getConnectedPackageName()> -> _SOURCE_
<android.location.Criteria: int getAccuracy()> -> _SOURCE_
<com.android.server.location.PassiveProvider: int getStatus(android.os.Bundle)> -> _SOURCE_
<android.location.Criteria: int getBearingAccuracy()> -> _SOURCE_
<com.android.server.location.LocationBasedCountryDetector: java.util.List getEnabledProviders()> -> _SOURCE_
<android.renderscript.Allocation: android.renderscript.Allocation createFromBitmapResource(android.renderscript.RenderScript,android.content.res.Resources,int,android.renderscript.Allocation$MipmapControl,int)> -> _SOURCE_
<com.android.server.location.LocationProviderProxy: long getStatusUpdateTime()> -> _SOURCE_
<com.android.server.LocationManagerService: java.lang.String getBestProvider(android.location.Criteria,boolean)> -> _SOURCE_
<android.location.Address: java.lang.String getSubThoroughfare()> -> _SOURCE_





<android.location.ILocationManager$Stub$Proxy: void clearTestProviderEnabled(java.lang.String)> -> _SINK_
<android.location.ILocationManager$Stub$Proxy: void clearTestProviderStatus(java.lang.String)> -> _SINK_
<android.location.ILocationManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.location.ILocationManager$Stub$Proxy: boolean addGpsStatusListener(android.location.IGpsStatusListener)> -> _SINK_
<android.location.ILocationManager$Stub$Proxy: boolean isProviderEnabled(java.lang.String)> -> _SINK_
<android.location.LocationManager: void setTestProviderLocation(java.lang.String,android.location.Location)> -> _SINK_
<com.android.server.LocationManagerService: void addTestProvider(java.lang.String,com.android.internal.location.ProviderProperties)> -> _SINK_
<android.location.ILocationManager$Stub$Proxy: void requestGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,java.lang.String)> -> _SINK_
<android.location.LocationManager: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)> -> _SINK_
<android.location.ILocationManager$Stub$Proxy: boolean sendNiResponse(int,int)> -> _SINK_
<android.location.ILocationManager$Stub$Proxy: void removeGeofence(android.location.Geofence,android.app.PendingIntent,java.lang.String)> -> _SINK_
<android.location.ILocationManager$Stub$Proxy: void locationCallbackFinished(android.location.ILocationListener)> -> _SINK_
<android.location.ILocationManager$Stub$Proxy: boolean providerMeetsCriteria(java.lang.String,android.location.Criteria)> -> _SINK_
<android.location.ILocationManager$Stub$Proxy: void removeTestProvider(java.lang.String)> -> _SINK_
<android.location.ILocationManager$Stub$Proxy: void removeUpdates(android.location.ILocationListener,android.app.PendingIntent,java.lang.String)> -> _SINK_
<android.location.LocationManager: boolean addNmeaListener(android.location.GpsStatus$NmeaListener)> -> _SINK_
<android.location.LocationManager: void setTestProviderEnabled(java.lang.String,boolean)> -> _SINK_
<android.location.ILocationManager$Stub$Proxy: void removeGpsStatusListener(android.location.IGpsStatusListener)> -> _SINK_
<android.location.ILocationManager$Stub$Proxy: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> -> _SINK_
<android.location.ILocationManager$Stub$Proxy: void clearTestProviderLocation(java.lang.String)> -> _SINK_
<android.location.ILocationManager$Stub$Proxy: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String)> -> _SINK_
<android.location.LocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> -> _SINK_
<android.location.LocationManager: boolean addGpsStatusListener(android.location.GpsStatus$Listener)> -> _SINK_
<android.location.ILocationManager$Stub$Proxy: void setTestProviderLocation(java.lang.String,android.location.Location)> -> _SINK_
<android.location.ILocationManager$Stub$Proxy: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)> -> _SINK_
<android.location.ILocationManager$Stub$Proxy: void setTestProviderEnabled(java.lang.String,boolean)> -> _SINK_
<android.location.LocationManager: boolean sendNiResponse(int,int)> -> _SINK_
<android.location.ILocationManager$Stub$Proxy: void addTestProvider(java.lang.String,com.android.internal.location.ProviderProperties)> -> _SINK_
<com.android.server.LocationManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_

#From the other file
<java.net.URLConnection: void connect()> -> _SINK_
<java.net.URLConnection: java.io.OutputStream getOutputStream()> -> _SINK_
<android.util.Log: int d(java.lang.String,java.lang.String)> -> _SINK_
<android.util.Log: int e(java.lang.String,java.lang.String)> -> _SINK_
<android.content.Context: void sendBroadcast(android.content.Intent)> -> _SINK_
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> -> _SINK_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SINK_
<java.net.URL: java.io.OutputStream openConnection()> -> _SINK_
<java.net.URL: java.lang.Object getContent()> -> _SINK_
<java.net.URL: java.lang.Object getContent(java.lang.Class[])> -> _SINK_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SINK_
<java.net.HttpURLConnection: void execute()> -> _SINK_
<java.net.Socket: void connect(java.net.SocketAddress> -> _SINK_
